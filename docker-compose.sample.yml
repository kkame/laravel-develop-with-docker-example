version: '3'

networks:
  default:
    external:
      name: traefik_default # Traefik 예제를 통해 생성된 Traefik의 네트워크를 공유하기 위해 지정. Traefik의 네트워크 이름이 다르다면 그에 맞게 변경 필요

services:
  php:
    restart: unless-stopped # 직접 컨테이너를 멈추는게 아니라면 재부팅하더라도 자동으로 시작되도록 합니다
    build:
      context: .
      args: # 빌드시 사용되는 값입니다. UID GID의 수정을 통해 호스트의 사용자 계정과 도커내의 사용자 계정을 동기화 시켜주기 위해 추가하였습니다
        UID: 1000 # 리눅스에서 기본적으로 사용되는 사용자계정의 ID값입니다. 만약 유저를 여러개 사용하고 계시고 정확한 값을 알고 싶다면 터미널에서 `echo $UID` 를 통해 확인 가능합니다
        GID: 1000 # 위와 동일하며 그룹ID 값입니다. `echo $GID`를 통해 확인가능합니다
    working_dir: /var/www/html #특별히 손댈 필요는 없지만 컨테이너 내 명령 실행시 (컴포저, artisan 등) 기본으로 시작될 디렉토리를 지정합니다
    volumes:
      - "./:/var/www/html" # 현재 프로젝트 폴더가 웹서버의 경로를 바라보게 합니다. 파일은 해당 경로에 맞게 자동으로 서로 동기화 됩니다.
      - "~/.ssh:/var/www/.ssh" #composer로 private 패키지를 받아올때 ssh 인증을 해야하는 경우 호스트의 사용자 계정을 동기화 시키기 위해 추가하였습니다
      - "~/.composer:/var/www/.composer" #composer는 사용자 계정의 디렉토리내에 패키지들의 캐시를 저장해두는데 이것을 호스트와 공유하기 위해 추가하였습니다. 이를 통해 php프로젝트가 여러개 일 경우 composer를 다운받아오는 속도를 줄일 수 있습니다
      - "/usr/local/bin/composer:/usr/local/bin/composer" #도커마다 컴포저를 설치하면 컴포저들의 버전업이 곤란하여 호스트에 설치후에 모든 프로젝트가 컴포저 명령어를 공유하도록 하였습니다
      - "/usr/bin/git:/usr/bin/git" # 컴포저와 같은 이유로 깃을 호스트에 설치후에 공유하도록 하였습니다
    labels:
      - "traefik.frontend.rule=Host:laravel.test" # Traefik을 통해 접속하는 홈페이지의 도메인이 laravel.test 일 경우 이 프로젝트로 연결되게 합니다. 도메인을 바꾸고 싶다면 여기서 수정해야 합니다.
      - "traefik.enable=true" # 명시적으로 Traefik에 노출을 지정합니다. 지정하지 않더라고 default 값은 true 입니다
    environment:
      TZ: ${TZ:-Asia/Seoul}

    networks:
      default:
        aliases:
          - laravel.test # 도커 내부의 dns에 laravel.test 라는 도메인이 이 컨테이너로 접속되도록 alias를 걸어줍니다. 이를 통해 로컬에 개발중인 프로젝트가 여러개 일 경우 서로간에 도메인의 참조를 걸어서 연결시킬 수 있습니다.
    depends_on:
      - mysql # mysql 도커 컨테이너가 정상적으로 실행된 이후에 실행되도록 합니다. 이를 통해 조금 더 안정적으로 서비스를 시작할 수 있습니다.

  mysql:
    restart: unless-stopped
    image: mysql:5.7
    user: 1000:1000 # 위에서 설명한 UID와 GID의 하드코딩값입니다. 이것을 지정함으로 인해 mysql 컨테이너가 자체적으로 생성하는 파일들이 host의 사용자 계정과 동일하게 설정이 가능합니다
    environment:
      TZ: ${TZ:-Asia/Seoul}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD} # 라라벨의 .env에서 설정된 값을 가져와서 root의 비밀번호로 지정하도록 하였습니다.
      MYSQL_DATABASE: ${DB_DATABASE} # 상동
      MYSQL_USER: ${DB_USERNAME} # 상동
      MYSQL_PASSWORD: ${DB_PASSWORD} #상동

    healthcheck:
      test: "mysqladmin ping --silent" # 데이터베이스가 실행과 동시에 바로 켜지는 것이 아니기 때문에 이것을 이용하여 정상적으로 mysql이 실행되었는지 확인하도록 합니다.
      timeout: 3s
      interval: 1s
    volumes:
      - ./storage/mysql:/var/lib/mysql #mysql의 데이터 파일이 저장될 경로를 지정합니다. 여기서는 storage/mysql로 데이터가 저장되도록 하였습니다.
    labels:
      - "traefik.enable=false" #mysql은 Traefik을 통해 노출 할 것이 아니기 때문에 false로 노출에서 제외합니다.

  redis:
    restart: unless-stopped
    image: redis
    labels:
      - "traefik.enable=false"
